using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading;
using log4net;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace DeviceHive.Client
{
    /// <summary>
    /// Provides default implementation of the <see cref="IClientService"/> interface to connect a client with the RESTful DeviceHive service.
    /// Using this class, clients can get information about networks and devices, receive notification and send commands.
    /// </summary>
    public class RestfulClientService : IClientService
    {
        #region Public Properties

        /// <summary>
        /// Gets URL of the DeviceHive service.
        /// </summary>
        public string ServiceUrl { get; private set; }
        
        /// <summary>
        /// Gets login used for service authentication.
        /// </summary>
        public string Login { get; private set; }
        
        /// <summary>
        /// Gets password used for service authentication.
        /// </summary>
        public string Password { get; private set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Default constructor.
        /// </summary>
        /// <param name="serviceUrl">URL of the DeviceHive service.</param>
        /// <param name="login">Login used for service authentication.</param>
        /// <param name="password">Password used for service authentication.</param>
        public RestfulClientService(string serviceUrl, string login, string password)
        {
            ServiceUrl = serviceUrl;
            Login = login;
            Password = password;
        }
        #endregion

        #region IClientService Members

        /// <summary>
        /// Gets a list of networks.
        /// </summary>
        /// <returns>A list of <see cref="Network"/> objects.</returns>
        public List<Network> GetNetworks()
        {
            return Get<List<Network>>("/network");
        }

        /// <summary>
        /// Gets a list of devices of the specific network.
        /// </summary>
        /// <param name="networkId">Network identifier.</param>
        /// <returns>A list of <see cref="Device"/> objects that belongs to the specified network.</returns>
        public List<Device> GetDevices(int networkId)
        {
            var network = Get<Network>(string.Format("/network/{0}", networkId));
            return network == null ? null : network.Devices;
        }

        /// <summary>
        /// Gets information about device.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <returns><see cref="Device"/> object.</returns>
        public Device GetDevice(Guid deviceId)
        {
            return Get<Device>(string.Format("/device/{0}", deviceId));
        }

        /// <summary>
        /// Gets a list of equipment in a device class.
        /// </summary>
        /// <param name="deviceClassId">Device class identifier.</param>
        /// <returns>A list of <see cref="Equipment"/> objects for the specified device class.</returns>
        public List<Equipment> GetEquipment(int deviceClassId)
		{
            var deviceClass = Get<DeviceClass>(string.Format("/device/class/{0}", deviceClassId));
            return deviceClass == null ? null : deviceClass.Equipment;
		}

        /// <summary>
        /// Gets a list of device equipment states.
        /// These objects provide information about the current state of device equipment.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <returns>A list of <see cref="DeviceEquipmentState"/> objects.</returns>
        public List<DeviceEquipmentState> GetEquipmentState(Guid deviceId)
		{
            return Get<List<DeviceEquipmentState>>(string.Format("/device/{0}/equipment", deviceId));
		}

        /// <summary>
        /// Gets a list of notifications generated by the device.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <param name="start">Notifications start date (inclusive, optional).</param>
        /// <param name="end">Notifications end date (inclusive, optional).</param>
        /// <returns>A list of <see cref="Notification"/> objects.</returns>
        public List<Notification> GetNotifications(Guid deviceId, DateTime? start = null, DateTime? end = null)
        {
            var url = string.Format("/device/{0}/notification", deviceId);
            var parameters = new[]
                {
                    start == null ? null : "start=" + start.Value.ToString("yyyy-MM-ddTHH:mm:ss.ffffff"),
                    end == null ? null : "end=" + end.Value.ToString("yyyy-MM-ddTHH:mm:ss.ffffff"),
                }.Where(p => p != null);

            return Get<List<Notification>>(url + (parameters.Any() ? "?" + string.Join("&", parameters) : null));
        }

        /// <summary>
        /// Polls device notification from the service.
        /// This methods blocks the current thread until a new command is received.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <param name="timestamp">Last received notification timestamp.</param>
        /// <param name="token">Cancellation token used to cancel polling operation.</param>
        /// <returns>A list of <see cref="Notification"/> objects.</returns>
        public List<Notification> PollNotifications(Guid deviceId, DateTime? timestamp, CancellationToken token)
        {
            while (true)
            {
                var url = string.Format("/device/{0}/notification/poll", deviceId);
                if (timestamp != null)
                {
                    url += "?timestamp=" + timestamp.Value.ToString("yyyy-MM-ddTHH:mm:ss.ffffff");
                }
                var notifications = Get<List<Notification>>(url, token);
                if (notifications != null && notifications.Any())
                    return notifications;
            }
        }

        /// <summary>
        /// Gets information about a notification generated by the device.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <param name="id">Notification identifier.</param>
        /// <returns>The <see cref="Notification"/> object.</returns>
        public Notification GetNotification(Guid deviceId, int id)
        {
            return Get<Notification>(string.Format("/device/{0}/notification/{1}", deviceId, id));
        }

        /// <summary>
        /// Gets a list of commands sent to the device.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <param name="start">Commands start date (inclusive, optional).</param>
        /// <param name="end">Commands end date (inclusive, optional).</param>
        /// <returns>A list of <see cref="Command"/> objects.</returns>
        public List<Command> GetCommands(Guid deviceId, DateTime? start = null, DateTime? end = null)
        {
            var url = string.Format("/device/{0}/command", deviceId);
            var parameters = new[]
                {
                    start == null ? null : "start=" + start.Value.ToString("yyyy-MM-ddTHH:mm:ss.ffffff"),
                    end == null ? null : "end=" + end.Value.ToString("yyyy-MM-ddTHH:mm:ss.ffffff"),
                }.Where(p => p != null);

            return Get<List<Command>>(url + (parameters.Any() ? "?" + string.Join("&", parameters) : null));
        }

        /// <summary>
        /// Gets information about a command sent to the device.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <param name="id">Command identifier.</param>
        /// <returns>The <see cref="Command"/> object.</returns>
        public Command GetCommand(Guid deviceId, int id)
        {
            return Get<Command>(string.Format("/device/{0}/command/{1}", deviceId, id));
        }

        /// <summary>
        /// Sends new command to the device.
        /// </summary>
        /// <param name="deviceId">Device unique identifier.</param>
        /// <param name="command">A <see cref="Command"/> object to be sent.</param>
        /// <returns>The <see cref="Command"/> object with updated identifier and timestamp.</returns>
        public Command SendCommand(Guid deviceId, Command command)
        {
            if (command == null)
                throw new ArgumentNullException("command");

            return Post<Command>(string.Format("/device/{0}/command", deviceId), command);
        }
        #endregion

        #region Private Methods

        private T Get<T>(string url)
        {
            Logger.Debug("Calling GET " + url);
            var request = WebRequest.Create(ServiceUrl + url);
            request.Credentials = new NetworkCredential(Login, Password);
            try
            {
                var response = request.GetResponse();
                using (var stream = response.GetResponseStream())
                {
                    return Deserialize<T>(stream);
                }
            }
            catch (WebException ex)
            {
                throw new ClientServiceException("Network error while sending request to the server", ex);
            }
        }

        private T Get<T>(string url, CancellationToken token)
        {
            Logger.Debug("Calling GET " + url);
            var request = WebRequest.Create(ServiceUrl + url);
            request.Credentials = new NetworkCredential(Login, Password);
            var asyncResult = request.BeginGetResponse(null, null);

            // wait for response and throw OperationCancelledException if operation has been cancelled
            if (WaitHandle.WaitAny(new[] { token.WaitHandle, asyncResult.AsyncWaitHandle }) == 0)
            {
                Logger.Debug("Operation has been cancelled: GET " + url);
                token.ThrowIfCancellationRequested();
            }

            try
            {
                var response = request.EndGetResponse(asyncResult);
                using (var stream = response.GetResponseStream())
                {
                    return Deserialize<T>(stream);
                }
            }
            catch (WebException ex)
            {
                throw new ClientServiceException("Network error while sending request to the server", ex);
            }
        }

        private T Post<T>(string url, T obj)
        {
            Logger.Debug("Calling POST " + url);
            var request = WebRequest.Create(ServiceUrl + url);
            request.Method = "POST";
            request.ContentType = "application/json";
            request.Credentials = new NetworkCredential(Login, Password);
            using (var stream = request.GetRequestStream())
            {
                Serialize(stream, obj);
            }

            try
            {
                var response = request.GetResponse();
                using (var stream = response.GetResponseStream())
                {
                    return Deserialize<T>(stream);
                }
            }
            catch (WebException ex)
            {
                throw new ClientServiceException("Network error while sending request to the server", ex);
            }
        }

        private void Serialize<T>(Stream stream, T obj)
        {
            if (obj == null)
                throw new ArgumentNullException("obj");

            using (var writer = new StreamWriter(stream))
            {
                var serializer = new JsonSerializer();
                serializer.NullValueHandling = NullValueHandling.Ignore;
                serializer.ContractResolver = new JsonContractResolver();
                serializer.Serialize(writer, obj);
            }
        }
        
        private T Deserialize<T>(Stream stream)
		{
			using (var reader = new StreamReader(stream))
			{
				var serializer = new JsonSerializer();
                serializer.NullValueHandling = NullValueHandling.Ignore;
                serializer.ContractResolver = new JsonContractResolver();
                return (T)serializer.Deserialize(reader, typeof(T));
			}
		}
        #endregion

        #region Private Properties

        private ILog Logger
        {
            get { return LogManager.GetLogger(GetType()); }
        }
        #endregion

        #region JsonContractResolver class

        private class JsonContractResolver : CamelCasePropertyNamesContractResolver
        {
            #region DefaultContractResolver Members

            protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)
            {
                var property = base.CreateProperty(member, memberSerialization);
                if (property.DeclaringType == typeof(Notification) && property.PropertyName == "name")
                {
                    property.PropertyName = "notification";
                }
                if (property.DeclaringType == typeof(Command) && property.PropertyName == "name")
                {
                    property.PropertyName = "command";
                }
                return property;
            }
            #endregion
        }
        #endregion
	}
}
